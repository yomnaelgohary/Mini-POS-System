// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using minipossystem.Models;

#nullable disable

namespace minipossystem.Migrations
{
    [DbContext(typeof(MiniPosSystemContext))]
    partial class MiniPosSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("minipossystem.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.HasKey("BranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("minipossystem.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyContactInfo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.Costumer", b =>
                {
                    b.Property<int>("CostumerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CostumerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CostumerId"));

                    b.Property<string>("CostumerContactInfo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CostumerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CostumerId");

                    b.ToTable("Costumer", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.CreditNote", b =>
                {
                    b.Property<int>("CreditNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CreditNoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditNoteId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SalesInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("SalesInvoiceID");

                    b.HasKey("CreditNoteId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SalesInvoiceId");

                    b.ToTable("CreditNote", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.CreditNoteItem", b =>
                {
                    b.Property<int>("CreditNoteItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CreditNoteItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditNoteItemId"));

                    b.Property<int>("CreditNoteId")
                        .HasColumnType("int")
                        .HasColumnName("CreditNoteID");

                    b.Property<int>("InvoiceItemId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceItemID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CreditNoteItemId");

                    b.HasIndex("CreditNoteId");

                    b.HasIndex("InvoiceItemId");

                    b.ToTable("CreditNoteItem", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("EmployeeContactInfo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("BranchId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("minipossystem.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("minipossystem.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderId"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrder", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.PurchaseOrderInvoice", b =>
                {
                    b.Property<int>("PurchaseOrderInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderInvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderInvoiceId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderID");

                    b.HasKey("PurchaseOrderInvoiceId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderInvoice", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.PurchaseOrderInvoiceItem", b =>
                {
                    b.Property<int>("PurchaseInvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("purchaseInvoiceItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseInvoiceItemId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PurchaseOrderInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderInvoiceID");

                    b.Property<int>("PurchaseOrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderItemID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PurchaseInvoiceItemId");

                    b.HasIndex("BranchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PurchaseOrderInvoiceId");

                    b.HasIndex("PurchaseOrderItemId");

                    b.ToTable("PurchaseOrderInvoiceItem", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.PurchaseOrderItem", b =>
                {
                    b.Property<int>("PurchaseOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderItemId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrderItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItem", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.SalesInvoice", b =>
                {
                    b.Property<int>("SalesInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesInvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesInvoiceId"));

                    b.Property<DateOnly>("InvoiveDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID");

                    b.HasKey("SalesInvoiceId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesInvoice", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.SalesInvoiceItem", b =>
                {
                    b.Property<int>("SalesInvoiceItmeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesInvoiceItmeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesInvoiceItmeId"));

                    b.Property<int>("CreditedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SalesInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("SalesInvoiceID");

                    b.Property<int>("SalesOrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderItemID");

                    b.HasKey("SalesInvoiceItmeId");

                    b.HasIndex("SalesInvoiceId");

                    b.HasIndex("SalesOrderItemId");

                    b.ToTable("SalesInvoiceItem", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.SalesOrder", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderId"));

                    b.Property<int>("CostumerId")
                        .HasColumnType("int")
                        .HasColumnName("CostumerID");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("CostumerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SalesOrder", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.SalesOrderItem", b =>
                {
                    b.Property<int>("SalesOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderItemId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID");

                    b.HasKey("SalesOrderItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderItem", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.SalesOrderWarehouse", b =>
                {
                    b.Property<int>("SalesOrderWarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderWarehouseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderWarehouseId"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderItemID");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    b.HasKey("SalesOrderWarehouseId");

                    b.HasIndex("SalesOrderItemId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("SalesOrderWarehouse", (string)null);
                });

            modelBuilder.Entity("minipossystem.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("VendorId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("minipossystem.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WarehouseId");

                    b.HasIndex("BranchId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("minipossystem.Models.WarehouseProduct", b =>
                {
                    b.Property<int>("WarehouseProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseProductId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    b.HasKey("WarehouseProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseProducts");
                });

            modelBuilder.Entity("minipossystem.Models.Branch", b =>
                {
                    b.HasOne("minipossystem.Models.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Branches_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("minipossystem.Models.CreditNote", b =>
                {
                    b.HasOne("minipossystem.Models.Employee", "Employee")
                        .WithMany("CreditNotes")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_CreditNote_Employees");

                    b.HasOne("minipossystem.Models.SalesInvoice", "SalesInvoice")
                        .WithMany("CreditNotes")
                        .HasForeignKey("SalesInvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_CreditNote_SalesInvoice");

                    b.Navigation("Employee");

                    b.Navigation("SalesInvoice");
                });

            modelBuilder.Entity("minipossystem.Models.CreditNoteItem", b =>
                {
                    b.HasOne("minipossystem.Models.CreditNote", "CreditNote")
                        .WithMany("CreditNoteItems")
                        .HasForeignKey("CreditNoteId")
                        .IsRequired()
                        .HasConstraintName("FK_CreditNoteItem_CreditNote");

                    b.HasOne("minipossystem.Models.SalesInvoiceItem", "InvoiceItem")
                        .WithMany("CreditNoteItems")
                        .HasForeignKey("InvoiceItemId")
                        .IsRequired()
                        .HasConstraintName("FK_CreditNoteItem_SalesInvoiceItem");

                    b.Navigation("CreditNote");

                    b.Navigation("InvoiceItem");
                });

            modelBuilder.Entity("minipossystem.Models.Employee", b =>
                {
                    b.HasOne("minipossystem.Models.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Employees_Branches");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("minipossystem.Models.PurchaseOrder", b =>
                {
                    b.HasOne("minipossystem.Models.Employee", "Employee")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrder_Employees");

                    b.HasOne("minipossystem.Models.Vendor", "Vendor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("VendorId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrder_Vendors");

                    b.Navigation("Employee");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("minipossystem.Models.PurchaseOrderInvoice", b =>
                {
                    b.HasOne("minipossystem.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderInvoices")
                        .HasForeignKey("PurchaseOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderInvoice_PurchaseOrder");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("minipossystem.Models.PurchaseOrderInvoiceItem", b =>
                {
                    b.HasOne("minipossystem.Models.Branch", "Branch")
                        .WithMany("PurchaseOrderInvoiceItems")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderInvoiceItem_Branches");

                    b.HasOne("minipossystem.Models.Employee", "Employee")
                        .WithMany("PurchaseOrderInvoiceItems")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderInvoiceItem_Employees");

                    b.HasOne("minipossystem.Models.PurchaseOrderInvoice", "PurchaseOrderInvoice")
                        .WithMany("PurchaseOrderInvoiceItems")
                        .HasForeignKey("PurchaseOrderInvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderInvoiceItem_PurchaseOrderInvoice");

                    b.HasOne("minipossystem.Models.PurchaseOrderItem", "PurchaseOrderItem")
                        .WithMany("PurchaseOrderInvoiceItems")
                        .HasForeignKey("PurchaseOrderItemId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderInvoiceItem_PurchaseOrderItem");

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("PurchaseOrderInvoice");

                    b.Navigation("PurchaseOrderItem");
                });

            modelBuilder.Entity("minipossystem.Models.PurchaseOrderItem", b =>
                {
                    b.HasOne("minipossystem.Models.Product", "Product")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderItem_Products");

                    b.HasOne("minipossystem.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderItem_PurchaseOrder");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("minipossystem.Models.SalesInvoice", b =>
                {
                    b.HasOne("minipossystem.Models.SalesOrder", "SalesOrder")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("SalesOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesInvoice_SalesOrder");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("minipossystem.Models.SalesInvoiceItem", b =>
                {
                    b.HasOne("minipossystem.Models.SalesInvoice", "SalesInvoice")
                        .WithMany("SalesInvoiceItems")
                        .HasForeignKey("SalesInvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesInvoiceItem_SalesInvoice");

                    b.HasOne("minipossystem.Models.SalesOrderItem", "SalesOrderItem")
                        .WithMany("SalesInvoiceItems")
                        .HasForeignKey("SalesOrderItemId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesInvoiceItem_SalesOrderItem");

                    b.Navigation("SalesInvoice");

                    b.Navigation("SalesOrderItem");
                });

            modelBuilder.Entity("minipossystem.Models.SalesOrder", b =>
                {
                    b.HasOne("minipossystem.Models.Costumer", "Costumer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CostumerId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrder_Costumer");

                    b.HasOne("minipossystem.Models.Employee", "Employee")
                        .WithMany("SalesOrders")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrder_Employees");

                    b.Navigation("Costumer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("minipossystem.Models.SalesOrderItem", b =>
                {
                    b.HasOne("minipossystem.Models.Product", "Product")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrderItem_Products");

                    b.HasOne("minipossystem.Models.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("SalesOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrderItem_SalesOrder");

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("minipossystem.Models.SalesOrderWarehouse", b =>
                {
                    b.HasOne("minipossystem.Models.SalesOrderItem", "SalesOrderItem")
                        .WithMany("SalesOrderWarehouses")
                        .HasForeignKey("SalesOrderItemId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrderWarehouse_SalesOrderItem");

                    b.HasOne("minipossystem.Models.Warehouse", "Warehouse")
                        .WithMany("SalesOrderWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrderWarehouse_Warehouses");

                    b.Navigation("SalesOrderItem");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("minipossystem.Models.Warehouse", b =>
                {
                    b.HasOne("minipossystem.Models.Branch", "Branch")
                        .WithMany("Warehouses")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouses_Branches");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("minipossystem.Models.WarehouseProduct", b =>
                {
                    b.HasOne("minipossystem.Models.Product", "Product")
                        .WithMany("WarehouseProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_WarehouseProducts_Products");

                    b.HasOne("minipossystem.Models.Warehouse", "Warehouse")
                        .WithMany("WarehouseProducts")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_WarehouseProducts_Warehouses");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("minipossystem.Models.Branch", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("PurchaseOrderInvoiceItems");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("minipossystem.Models.Company", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("minipossystem.Models.Costumer", b =>
                {
                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("minipossystem.Models.CreditNote", b =>
                {
                    b.Navigation("CreditNoteItems");
                });

            modelBuilder.Entity("minipossystem.Models.Employee", b =>
                {
                    b.Navigation("CreditNotes");

                    b.Navigation("PurchaseOrderInvoiceItems");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("minipossystem.Models.Product", b =>
                {
                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("SalesOrderItems");

                    b.Navigation("WarehouseProducts");
                });

            modelBuilder.Entity("minipossystem.Models.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderInvoices");

                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("minipossystem.Models.PurchaseOrderInvoice", b =>
                {
                    b.Navigation("PurchaseOrderInvoiceItems");
                });

            modelBuilder.Entity("minipossystem.Models.PurchaseOrderItem", b =>
                {
                    b.Navigation("PurchaseOrderInvoiceItems");
                });

            modelBuilder.Entity("minipossystem.Models.SalesInvoice", b =>
                {
                    b.Navigation("CreditNotes");

                    b.Navigation("SalesInvoiceItems");
                });

            modelBuilder.Entity("minipossystem.Models.SalesInvoiceItem", b =>
                {
                    b.Navigation("CreditNoteItems");
                });

            modelBuilder.Entity("minipossystem.Models.SalesOrder", b =>
                {
                    b.Navigation("SalesInvoices");

                    b.Navigation("SalesOrderItems");
                });

            modelBuilder.Entity("minipossystem.Models.SalesOrderItem", b =>
                {
                    b.Navigation("SalesInvoiceItems");

                    b.Navigation("SalesOrderWarehouses");
                });

            modelBuilder.Entity("minipossystem.Models.Vendor", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("minipossystem.Models.Warehouse", b =>
                {
                    b.Navigation("SalesOrderWarehouses");

                    b.Navigation("WarehouseProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
